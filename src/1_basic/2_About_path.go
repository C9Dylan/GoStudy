package main

/**
	1. GO SDK下的各个文件夹:
		目录名	说明
		api	每个版本的 api 变更差异
		bin	go 源码包编译出的编译器（go）、文档工具（godoc）、格式化工具（gofmt）
		doc	英文版的 Go 文档
		lib	引用的一些库文件
		misc	杂项用途的文件，例如 Android 平台的编译、git 的提交钩子等
		pkg	Windows 平台编译好的中间文件
		src	标准库的源码
		test	测试用例

	2. 一个Go语言项目的目录一般包含以下三个子目录：
		src 目录：放置项目和库的源文件；
		pkg 目录：放置编译后生成的包/库的归档文件；
		bin 目录：放置编译后生成的可执行文件。

	3. 关于GOPATH:

		在很多与 Go语言相关的书籍、文章中描述的 GOPATH 都是通过修改系统全局的环境变量来实现的。
		然而，根据笔者多年的 Go语言使用和实践经验及周边朋友、同事的反馈，
		这种设置全局 GOPATH 的方法可能会导致当前项目错误引用了其他目录的 Go 源码文件从而造成编译输出错误的版本或编译报出一些无法理解的错误提示。

		比如说，将某项目代码保存在 /home/davy/projectA 目录下，将该目录设置为 GOPATH。
		随着开发进行，需要再次获取一份工程项目的源码，此时源码保存在 /home/davy/projectB 目录下，
		如果此时需要编译 projectB 目录的项目，但开发者忘记设置 GOPATH 而直接使用命令行编译，
		则当前的 GOPATH 指向的是 /home/davy/projectA 目录，而不是开发者编译时期望的 projectB 目录。编译完成后，开发者就会将错误的工程版本发布到外网。

		因此，建议大家无论是使用命令行或者使用集成开发环境编译 Go 源码时，GOPATH 跟随项目设定
 */